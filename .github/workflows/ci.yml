name: CI
on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        branch: [master]
        os:
          - linux
          - windows
        # TODO: reconsider re-enabling other operating systems
        #  - macos
        cpu:
          - amd64
          - i386
        nim-compile-lang:
          - c
          - cpp
        nim-version:
          - 1.2.x
          - 1.4.x
          - stable
        lua-version: # only here for the variable
          - 5.3.6
        #exclude:
        #  - os: macos
        #    cpu: i386
        include:
          - os: linux
            builder: ubuntu-18.04
          - os: windows
            builder: windows-2019
        #  - os: macos
        #    builder: macos-10.15

    name: '${{ matrix.os }}-${{ matrix.cpu }}-nim${{ matrix.nim-version }}-${{ matrix.nim-compile-lang }} (${{ matrix.branch }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: volana
          submodules: false

      # TODO: simplify this to make it easier to manage

      - name: Install build dependencies (Linux i386)
        if: runner.os == 'Linux' && matrix.cpu == 'i386'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-fast update -qq
          sudo DEBIAN_FRONTEND='noninteractive' apt-fast install \
            --no-install-recommends -yq gcc-multilib g++-multilib \
            libssl-dev:i386
          mkdir -p external/bin
          cat << EOF > external/bin/gcc
          #!/bin/bash
          exec $(which gcc) -m32 "\$@"
          EOF
          cat << EOF > external/bin/g++
          #!/bin/bash
          exec $(which g++) -m32 "\$@"
          EOF
          chmod 755 external/bin/gcc external/bin/g++
          echo '${{ github.workspace }}/external/bin' >> $GITHUB_PATH


      - name: Restore MinGW-W64 (Windows) from cache
        if: runner.os == 'Windows'
        id: windows-mingw-cache
        uses: actions/cache@v2
        with:
          path: external/mingw-${{ matrix.target.cpu }}
          key: 'mingw-${{ matrix.target.cpu }}'


      - name: Install MinGW64 dependency (Windows)
        if: >
          steps.windows-mingw-cache.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p external
          if [[ '${{ matrix.target.cpu }}' == 'amd64' ]]; then
            MINGW_URL="https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z"
            ARCH=64
          else
            MINGW_URL="https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win32/Personal Builds/mingw-builds/8.1.0/threads-posix/dwarf/i686-8.1.0-release-posix-dwarf-rt_v6-rev0.7z"
            ARCH=32
          fi
          curl -L "$MINGW_URL" -o "external/mingw-${{ matrix.target.cpu }}.7z"
          7z x -y "external/mingw-${{ matrix.target.cpu }}.7z" -oexternal/
          mv external/mingw$ARCH external/mingw-${{ matrix.target.cpu }}


      - name: Path to cached dependencies (Windows)
        if: >
          runner.os == 'Windows'
        shell: bash
        run: |
          echo '${{ github.workspace }}'"/external/mingw-${{ matrix.target.cpu }}/bin" >> $GITHUB_PATH
          echo '${{ github.workspace }}'"/external/dlls-${{ matrix.target.cpu }}" >> $GITHUB_PATH


      #- name: Restore Nim DLLs dependencies (Windows) from cache
      #  if: runner.os == 'Windows'
      #  id: windows-dlls-cache
      #  uses: actions/cache@v2
      #  with:
      #    path: external/dlls-${{ matrix.target.cpu }}
      #    key: 'dlls-${{ matrix.target.cpu }}'


      #- name: Install DLLs dependencies (Windows)
      #  if: >
      #    steps.windows-dlls-cache.outputs.cache-hit != 'true' &&
      #    runner.os == 'Windows'
      #  shell: bash
      #  run: |
      #    mkdir -p external
      #    curl -L "https://nim-lang.org/download/windeps.zip" -o external/windeps.zip
      #    7z x -y external/windeps.zip -oexternal/dlls-${{ matrix.target.cpu }}


      - name: Setup Nim
        uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ matrix.nim-version }}

      - name: Restore prebuilt Lua from cache
        id: lua-cache
        uses: actions/cache@v1
        with:
          path: volana/external
          key: 'lua-${{ matrix.lua-version }}-${{ matrix.os }}-${{ matrix.cpu }}'


      - name : Download and build lualib
        if: steps.lua-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          EXTPATH=volana/external
          mkdir -p "$EXTPATH"
          curl -L https://www.lua.org/ftp/lua-${{ matrix.lua-version }}.tar.gz --output-dir "$EXTPATH"
          tar xfz "$EXTPATH/lua-${{ matrix.lua-version }}.tar.gz" -C "$EXTPATH"
          ln -s "$EXTPATH/lua-${{ matrix.lua-version }}" "$EXTPATH/lua"
          cd volana
          nim e -d:volanaStatic scripts/build.nims
          cd ..
  

      - name: Run tests
        shell: bash
        run: |
          cd volana
          env TEST_LANG="${{ matrix.nim-compile-lang }}" nimble test

